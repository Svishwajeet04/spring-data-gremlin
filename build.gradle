plugins {
    id 'java-library'
    id 'maven-publish'
    id 'checkstyle'
    id 'com.github.spotbugs' version '6.0.7'
    id 'jacoco'
}

group = 'com.spring.data.gremlin'
archivesBaseName = 'spring-data-gremlin'
version = '2.3.1-SNAPSHOT'

description = 'Gremlin support for Spring Data'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
}

ext {
    springFrameworkVersion = '6.1.2'
    springDataVersion = '3.2.1'
    springBootTestVersion = '3.2.1'
    gremlinDriverVersion = '3.7.3'
    commonsLang3Version = '3.14.0'
    lombokVersion = '1.18.30'
    mockitoCoreVersion = '5.8.0'
    jacksonVersion = '2.16.1'
    janusGraphVersion = '1.0.0'
}

dependencies {
    // Spring framework BOM
    implementation platform("org.springframework:spring-framework-bom:${springFrameworkVersion}")

    // Spring framework
    implementation('org.springframework:spring-core') {
        exclude group: 'commons-logging', module: 'commons-logging'
    }

    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // Spring web
    implementation 'org.springframework:spring-web'

    // Spring Tx
    implementation 'org.springframework:spring-tx'

    // Spring context
    implementation 'org.springframework:spring-context'

    // Spring Data Commons
    implementation "org.springframework.data:spring-data-commons:${springDataVersion}"

    // Apache Tinkerpop Gremlin Driver
    implementation "org.apache.tinkerpop:gremlin-driver:${gremlinDriverVersion}"

    // JanusGraph (optional dependency)
    compileOnly "org.janusgraph:janusgraph-core:${janusGraphVersion}"

    // Apache Commons Lang3
    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"

    // Jackson databind
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

    // Spring Boot auto-config (compileOnly) for auto-configuration support
    compileOnly "org.springframework.boot:spring-boot-autoconfigure:${springBootTestVersion}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootTestVersion}"

    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    // Test dependencies
    testImplementation "org.mockito:mockito-core:${mockitoCoreVersion}"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootTestVersion}"
    
    // JanusGraph test dependency
    testImplementation "org.janusgraph:janusgraph-core:${janusGraphVersion}"
    testImplementation "org.janusgraph:janusgraph-berkeleyje:${janusGraphVersion}"
    testImplementation "org.janusgraph:janusgraph-lucene:${janusGraphVersion}"

    // JUnit 4 support for existing tests
    testImplementation 'junit:junit:4.13.2'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.10.1'
}

// Resolve dependency conflicts
configurations.all {
    resolutionStrategy {
        force 'com.google.guava:guava:33.0.0-jre'
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'com.google.collections' && details.requested.name == 'google-collections') {
                details.useTarget group: 'com.google.guava', name: 'guava', version: '33.0.0-jre'
                details.because 'google-collections is replaced by guava'
            }
        }
    }
}

processResources {
    filesMatching(['META-INF/project.properties']) {
        expand(project.properties)
    }
}

checkstyle {
    toolVersion = '10.12.7'
    configFile = file("${project.rootDir}/config/checkstyle.xml")
    ignoreFailures = true
    showViolations = true
}

checkstyleMain {
    source = 'src/main/java'
    enabled = false
}

checkstyleTest {
    source = 'src/test/java'
    enabled = false
}

spotbugs {
    effort = 'max'
    reportLevel = 'low'
    excludeFilter = file("${project.rootDir}/config/findbugs-exclude.xml")
}

spotbugsMain {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

jacoco {
    toolVersion = '0.8.11'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    options.addBooleanOption('Xdoclint:none', true)
    failOnError = false
}

jar {
    manifest {
        attributes(
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'Microsoft',
            'Specification-Title': project.name,
            'Specification-Version': project.version,
            'Specification-Vendor': 'Microsoft'
        )
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            pom {
                name = 'Spring Data Gremlin'
                description = 'Gremlin support for Spring Data'
                url = 'https://github.com/Microsoft/spring-data-gremlin'

                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://github.com/Microsoft/spring-data-gremlin/blob/master/LICENSE'
                        distribution = 'repo'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com:Microsoft/spring-data-gremlin.git'
                    developerConnection = 'scm:git:ssh://github.com:Microsoft/spring-data-gremlin.git'
                    url = 'https://github.com/Microsoft/spring-data-gremlin/tree/master'
                }

                developers {
                    developer {
                        id = 'incarnation-p-lee'
                        name = 'Pan Li'
                        email = 'panli@microsoft.com'
                    }
                }
            }
        }
    }
}

// Integration tests configuration
tasks.register('integrationTest', Test) {
    description = 'Runs integration tests'
    group = 'verification'

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    shouldRunAfter test

    useJUnitPlatform()
}

check.dependsOn integrationTest

// Profile-like behavior for full tests
if (project.hasProperty('fullTest')) {
    integrationTest.enabled = true
} else {
    integrationTest.enabled = false
}
